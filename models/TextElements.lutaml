diagram TextElements {
  *|
  Diagram:        TextElements
  DateCreate:     28/07/2018
  Description:    BasicDocument / SecureDoc is a family of document models that forms the basis of Metanorma IsoDoc (via Metanorma StandardDocument), which is used to represent ISO Standards and similarly structured standards.
                  It is also the document model that Selagraph operates on.
                  The Relaton Bibliography UML models used in these models are located here: Relaton BibModels.
                  BasicDocument itself is a document model that can serve as a transit data structure for document conversion, such as taking input from AsciiDoc or Markdown and converting them into an output format, such as Metanorma IsoDoc

  Hystory of changes:
  > 22/08/2018
      - diagram configuration updated
      - new classes are added "MonospaceElement"
      - some relations between elements are updated
  > 08/12/2018
      - added keyword
  > 03/06/2019
      - allow recursion of text elements
  |*

  class BasicElement {
    definition {
      Container of inline content in BasicDocument.
    }
    +contribMetadata: ContributionElementMetadata[0..*] {
      definition {
        Metadata of the contributor responsible for the action.
      }
    }
  }

  class TextElement{
    definition {
      Inline element containing text and associated formatting information, 
      but which does not contain any associated identifiers or references to identifiers.
    }
    +content: TextElementType {
      definition {
        Content of the Text Element. May recursively contain other Text Elements.
      }
    }
  }

  class TextElementType{
    definition {
      Content of the Text Element.
    }
    +content: LocalizedString[0..*] {
      definition {
        Textual content of the Text Element.
      }
    }
    +elements: TextElement[0..*] {
      definition {
        May recursively contain other Text Elements.
      }
    }
  }

  class MonospaceElement {
    definition {
      Monospace text. Corresponds to HTML `tt`, `code`.
    }
  }

  class KeywordElement {
    definition {
      Keyword text. 
    }
  }

  class EmphasisElement {
    definition {
      Emphasised text. Corresponds to HTML `em`, `i`.
    }
  }

  class SubscriptElement {
    definition {
      Subscript text. Corresponds to HTML `sub`.
    }
  }

  class StrongElement {
    definition {
      Strong text. Corresponds to HTML `strong`, `b`.
    }
  }

  class StemElement{
    definition {
      Mathematically formatted text.
    }
    +stemType: StemType {
      definition {
        The notation used to mathematically format the text.
      }
    }
    +stemValue: StemValue {
      definition {
        The content of the mathematically formatted text.
      }
    }
  }

  class SuperscriptElement {
    definition {
      Superscript text. Corresponds to HTML `sup`.
    }
  }

  class StrikeElement {
    definition {
      Strikethrough text. Corresponds to HTML 4 `s`.
    }
  }

  class SmallCapsElement {
    definition {
      Small caps text.
    }
  }

  class UnderlineElement {
    definition {
      Underlined text. Corresponds to HTML 4 `u`.
    }
  }

  class StemValue {
    definition {
        The content of mathematically formatted text.
    }
  }

  class RubyElement {
    definition {
      Text with Ruby annotations in East Asian languages. Corresponds to HTML `ruby`.
    }
    +rubyParen: LocalizedString[0..*] {
      definition {
        Ruby annotation. Corresponds to HTML `rp`.
      }
    }
    +rubyText: LocalizedString[0..*] {
      definition {
        Ruby annotated text. Corresponds to HTML `rt`.
      }
    }
  }

  class MathML{
    definition {
      Mathematical text formatted in MathML.
    }
    +value: MathMLValue {
      definition {
        MathML content.
      }
    }
  }

  class AsciiML{
    definition {
      Mathematical text formatted in AsciiMath.
    }
    +value: String {
      definition {
        AsciiMath content.
      }
    }
  }

  class AsciiML{
    definition {
      Mathematical text formatted in LaTeX.
    }
    +value: String {
      definition {
        LaTeX content.
      }
    }
  }

  enum StemType {
    unstructured {
      definition {
        The notation used to mathematically format text.
      }
    }
    MathML {
      definition {
        MathML
      }
    }
    AsciiML {
      definition {
        AsciiMath
      }
    }
    LaTeX {
      definition {
        LaTeX
      }
    }
  }

  association {
    owner BasicElement
    member TextElement
    owner_type inheritance
  }
  association {
    owner TextElementType
    member TextElement
    member_type direct
  }

  association {
    owner TextElement
    member KeywordElement
    owner_type inheritance
  }
  association {
    owner TextElement
    member MonospaceElement
    owner_type inheritance
  }
  association {
    owner TextElement
    member EmphasisElement
    owner_type inheritance
  }
  association {
    owner TextElement
    member SubscriptElement
    owner_type inheritance
  }
  association {
    owner TextElement
    member StrongElement
    owner_type inheritance
  }
  association {
    owner TextElement
    member UnderlineElement
    owner_type inheritance
  }
  association {
    owner TextElement
    member StemElement
    owner_type inheritance
  }

  association {
    owner StemType
    member StemElement
    member_type direct
  }
  association {
    owner StemValue
    member StemElement
    member_type direct
  }

  association {
    owner StemValue
    member MathML
    owner_type inheritance
  }
  association {
    owner StemValue
    member AsciiML
    owner_type inheritance
  }
  association {
    owner StemValue
    member LaTeX
    owner_type inheritance
  }

  association {
    owner TextElement
    member SuperScriptElement
    owner_type inheritance
  }
  association {
    owner TextElement
    member StrikeElement
    owner_type inheritance
  }
  association {
    owner TextElement
    member SmallCapsElement
    owner_type inheritance
  }
  association {
    owner TextElement
    member RubyElement
    owner_type inheritance
  }
}
