diagram ReferenceElements {
  *|
  Diagram:        ReferenceElements
  DateCreate:     28/07/2018
  Description:    BasicDocument / SecureDoc is a family of document models that forms the basis of Metanorma IsoDoc (via Metanorma StandardDocument), which is used to represent ISO Standards and similarly structured standards.
                  It is also the document model that Selagraph operates on.
                  The Relaton Bibliography UML models used in these models are located here: Relaton BibModels.
                  BasicDocument itself is a document model that can serve as a transit data structure for document conversion, such as taking input from AsciiDoc or Markdown and converting them into an output format, such as Metanorma IsoDoc

  History of changes:
  > 22/08/2018
      - diagram configuration updated
      - relations between some elements are updated
  > 04/05/2019
      - alt attribute on ReferenceToLinkElement
  > 11/12/2020
      - index-xref
  |*

  class BasicElement {
    definition {
      Container of inline content in BasicDocument.
    }
    +contribMetadata: ContributionElementMetadata[0..*] {
      definition {
        Attribution of the element to a specific contributor, to be used in change management of documents.
      }
    }
  }

  class ReferenceElement{
    definition {
      Inline element, which references an identifier of a document, a block in a document, or an element in a document.
    }
    +type: ReferenceFormat {
      definition {
        The type of Reference Element, prescribing how it is to be rendered.
      }
    }
    +text: BasicElement[0..1] {
      definition {
        The textual content of the element. The `text` is what we wish to show the link as (e.g., the "content" of `<xx>my link text</xx>`)
      }
    }
    +alt: String[0..1] {
      definition {
        Alternate text, used for accessibility.
      }
    }
  }

  class Citation <<Bibliography>> {
    definition {
      A reference to a bibliographic entity, as modelled in Relaton.
    }
  }

  class ReferenceToIdElement{
    definition {
      An internal reference to an element of the current document.
    }
    +target: IdElement {
      definition {
        The identifier of a section, block or inline element referenced.
      }
    }
  }

  class IndexXrefElement {
    definition {
      A reference to an index term, cross-referenced within an index as an
      alternative index entry, either as a "see" or a "see also" cross-reference.
      The text in the inline element is the primary index term to be be cross-referenced.
    }
    +secondary: String[0..1] {
      definition {
        The secondary index term to be be cross-referenced.
      }
    }
    +tertiary: String[0..1] {
      definition {
        The tertiary index term to be be cross-referenced.
      }
    }
    +target: String {
      definition {
        The index term to be cross-referenced to.
      }
    }
    +also: Boolean {
      definition {
        The cross-reference is to be treated as "see also" rather than as "see".
      }
    }
  }

  class ReferenceToLinkElement{
    definition {
      A reference to an external document or resource.
    }
    +target: Uri {
      definition {
        The location or online identifier of the external document or resource.
      }
    }
  }

  class ReferenceToCitationElement{
    definition {
      An external reference to a bibliographic entity.
    }
    +normative: Boolean[0..1] {
      definition {
        Whether the reference is to be treated as normative or informative, particularly in the context of normative documents such as standards.
      }
    }
    +citeAs: TextElement[0..*] {
      definition {
        Form that the bibliographic citation should take when it is rendered.
      }
    }
  }

  class ReferenceToIdWithParagraphElement{
    definition {
      Inline reference to a paragraph or paragraphs: element combining the reference and the referenced
      content in the one element.
    }
    +content: ParagraphBlock[1..*] {
      definition {
        The paragraph or paragraphs referenced in this element.
      }
    }
  }

  class Callout{
    definition {
      Inline reference to a paragraph or paragraphs, appearing as annotation of source code.
      The target of the callout is understood to be the location of the callout within the source code; the extent of the target is not expressed overtly.
    }
    +type: "callout" 
    +text: TextElement {
      definition { 
        The label of the callout, used to identify its target within the source code.
      }
    }
  }

  class Footnote{
    definition {
      Inline reference to a paragraph or paragraphs, appearing as a footnote.
    }
    +type: "footnote" 
  }

  enum ReferenceFormat {
    unstructured {
      definition {
        The type of Reference Element, prescribing how it is to be rendered
      }
    }
    external {
      definition {
        Reference to an external document.
      }
    }
    inline {
      definition {
        Reference to another element in the same document.
      }
    }
    footnote {
      definition {
        Inline reference to a block to be rendered as a footnote.
      }
    }
    callout {
      definition {
        Inline reference to a block to be referenced as a sourcecode callout.
      }
    }
  }

  ** note "* `text` is what you want to show the link as.\n(i.e., the `content` of <xx>my link text</xx>)" as N1
  ** note left of ReferenceToIdWithParagraphElement: `ReferenceToIdWithParagraphElement`\nis just a Footnote or a CalloutAnnotation\nwith the proper ReferenceFormat
  ** note bottom of Footnote: `Footnote` is a ReferenceToldWithParagraphElement,\nwith type understood to be footnote,\nand target eliminated since the target text identified\nis the content attribute
  ** note bottom of Callout: `Callout` is a ReferenceToIdElement with\ntype understood to be callout,\nand with text constrained to be a TextElement
  ** note bottom of IndexXrefElement: the text is the primary index term

  association {
    owner BasicElement
    member ReferenceElement
    owner_type inheritance
  }
association {
    owner ReferenceElement
    member IndexXrefElement
    owner_type inheritance
  }

  association {
    owner ReferenceElement
    member ReferenceToIdElement
    owner_type inheritance
  }
  association {
    owner ReferenceElement
    member ReferenceToLinkElement
    owner_type inheritance
  }
  association {
    owner ReferenceElement
    member ReferenceToCitationElement
    owner_type inheritance
  }

  association {
    owner ReferenceFormat
    member ReferenceElement
    member_type direct
  }

  association {
    owner Citation
    member ReferenceToCitationElement
    owner_type inheritance
  }

  association {
    owner ReferenceToIdElement
    member ReferenceToIdWithParagraphElement
    owner_type inheritance
  }
  association {
    owner ReferenceToIdElement
    member Callout
    owner_type inheritance
  }

  association {
    owner ReferenceToIdWithParagraphElement
    member Footnote
    owner_type inheritance
  }
}
