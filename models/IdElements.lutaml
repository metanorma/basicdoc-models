diagram IdElements {
  *|
  Diagram:        IdElements
  DateCreate:     28/07/2018
  Description:    BasicDocument / SecureDoc is a family of document models that forms the basis of Metanorma IsoDoc (via Metanorma StandardDocument), which is used to represent ISO Standards and similarly structured standards.
                  It is also the document model that Selagraph operates on.
                  The Relaton Bibliography UML models used in these models are located here: Relaton BibModels.
                  BasicDocument itself is a document model that can serve as a transit data structure for document conversion, such as taking input from AsciiDoc or Markdown and converting them into an output format, such as Metanorma IsoDoc

  Hystory of changes:
  > 22/08/2018
      - diagram configuration updated
      - new classes are added "Bookmark"
      - classes are removed/commented "Figure", "Subfigure", "List", "UnorderedList", "DefinitionList", "OrderedList", "Definition"
      - enumerations are removed/commented "OrderedListType"
      - notes are added for "Image"
      - some of the relations between the elements are updated
  > 18/01/2019
      - alt attribute on images
  > 19/03/2019
      - added image/filename
  > 14/10/2019
      - added title attribute on media
  |*

  class BasicElement {
    definition {
      Container of inline content in BasicDocument.
    }
    +contribMetadata: ContributionElementMetadata[0..*] {
      definition {
        Metadata of the contributor responsible for the action.
      }
    }
  }

  class IdElement{
    definition {
      BasicElement with an identifier, to be used in crossreferencing by Reference Elements.
    }
    +id: String {
      definition {
        Identifier of BasicElement.
      }
    }
  }

  class Media{
    definition {
      Container for media content.
    }
    +filename: String[0..1] {
      definition {
        File name corresponding to the media, to which the media can be extracted if it is represented inline (e.g. in Base64 encoding in the URI).
      }
    }
    +source: Uri {
      definition {
        URI of the media file.
      }
    }
    +type: MediaType {
      definition {
        Type of the media file.
      }
    }
    +alt: String[0..1] {
      definition {
        Alternate text, supplied for accessibility.
      }
    }
    +title: String[0..1] {
      definition {
        Title, supplied for accessibility.
      }
    }
    +longdesc: Uri[0..1] {
      definition {
        URI pointing to more extensive alternate text description, supplied for accessibility.
      }
    }
  }

  class Image{
    definition {
      Container for image content.
    }
    +height: Integer[0..1] {
      definition {
        Height of image. Can have "auto" as value.
      }
    }
    +width: Integer[0..1] {
      definition {
        Width of image. Can have "auto" as value.
      }
    }
  }

  class Audio{
    definition {
      Container for audio content.
    }
    +altsource: AltSource[0..*] {
      definition {
        Alternative files to use as media.
      }
    }
  }

  class Video{
    definition {
      Container for video content.
    }
    +altsource: AltSource[0..*] {
      definition {
        Alternative files to use as media.
      }
    }
    +height: Integer[0..1] {
      definition {
        Height of video. Can have "auto" as value.
      }
    }
    +width: Integer[0..1] {
      definition {
        Width of video. Can have "auto" as value.
      }
    }
  }

  class AltSource{
    definition {
      Alternative file to use as media.
    }
    +filename: String[0..1] {
      definition {
        File name corresponding to the media, to which the media can be extracted if it is represented inline (e.g. in Base64 encoding in the URI).
      }
    }
    +source: Uri {
      definition {
        URI of the media file.
      }
    }
    +type: MediaType {
      definition {
        Type of the media file.
      }
    }
  }

  class Bookmark {
    definition {
      Anchor for cross-references which do not have scope over blocks or sections. Anchors within a block under the BasicDocument model cannot span across a number of inline elements; bookmarks are intended as point anchors. For that reason, the Review block has a starting reference and an optional ending reference, which can be bookmarks as well as block or section references.
    }
  }

  class MediaType{
    definition {
      Type of a media file.
    }
    +content: String {
      definition {
        Value of the type of a media file. The Basic Document model leaves the text to be used here open, but recommends the use of MIME types.
      }
    }
  }

  ** note right of IdElement : The `IdElement` itself acts as a reference point,\nsuch as in a SourcecodeBlock for\ncallout references (the IdElement is the location),\nand for delimiting ReviewComment start/end places.
  ** note left of Image : We also allow the\nvalue "auto" for\nheight and width
  ** note right of MediaType : MIME types recommended

  association {
    owner BasicElement
    member IdElement
    owner_type inheritance
  }

  association {
    owner IdElement
    member Media
    owner_type inheritance
  }
  association {
    owner IdElement
    member Bookmark
    owner_type inheritance
  }
  association {
    owner Media
    member Image
    owner_type inheritance
  }
  association {
    owner Media
    member Audio
    owner_type inheritance
  }
  association {
    owner Media
    member Video
    owner_type inheritance
  }

  association {
    owner MediaType
    member Media
    member_type direct
  }
  association {
    owner AltSource
    member Video
    member_type direct
  }
  association {
    owner AltSource
    member Audio
    member_type direct
  }
}
