diagram AncillaryBlocks {
  *|
  > 2019-12-06
      - added alt attribute to LiteralBlock
  |*
  class BasicBlock {
    definition {
      Block of textual content in BasicDocument.
    }
  }

  class FigureBlock{
    definition {
      Block containing a figure: a visual rather than textual asset, possibly with accompanying text.
    }
    +source: String[0..1] {
      definition {
        A URI or other reference intended to link to an externally hosted image (or equivalent).
      }
    }
    +unnumbered: Boolean[0..1] {
      definition {
        The block should be excluded from any automatic numbering of blocks of this class in the document.
      }
    }
    +subsequence: String[0..1] {
      definition {
      Define a subsequence for numbering of this block; e.g. if this block would be numbered
      as 7, but it has a subsequence value of XYZ, this block, and all consecutive blocks
      of the same class and with the same subsequence value, will be numbered consecutively
      with the same number and in a subsequence: 7a, 7b, 7c etc.
      }
    }
    +name: TextElement[0..*] {
      definition {
        The caption of the block.
      }
    }
    +class: LocalizedString[0..1] {
      definition {
        The semantic category of the figure. This is to allow different classes of figure (e.g. _Plate_, _Chart_, _Diagram_) to be auto-numbered and captioned differently.
      }
    }
    +image: Image[0..1] {
      definition {
        The image file to be included in the figure as its main content.
      }
    }
    +video: Video[0..1] {
      definition {
        The video file to be included in the figure as its main content.
      }
    }
    +audio: Audio[0..1] {
      definition {
        The audio file to be included in the figure as its main content.
      }
    }
    +figure: Subfigure[0..*] {
      definition {
        Figures embedded within the main figure.
      }
    }
    +definitions: DefinitionList[0..1] {
      definition {
        An optional definitions list defining any symbols used in the figure.
      }
    }
    +footnotes: ReferenceToldWithParagraphElement[0..*] {
      definition {
        Optional footnotes specific to the figure.
      }
    }
  }

  class Subfigure {
    definition {
      A figure embedded within another figure.
    }
  }

  class SourcecodeBlock{
    definition {
      Block containing computer code or comparable text.
    }
    +name: TextElement[0..*] {
      definition {
        The caption of the block.
      }
    }
    +unnumbered: Boolean[0..1] {
      definition {
        The block should be excluded from any automatic numbering of blocks of this class in the document.
      }
    }
    +subsequence: String[0..1] {
      definition {
      Define a subsequence for numbering of this block; e.g. if this block would be numbered
      as 7, but it has a subsequence value of XYZ, this block, and all consecutive blocks
      of the same class and with the same subsequence value, will be numbered consecutively
      with the same number and in a subsequence: 7a, 7b, 7c etc.
      }
    }
    +filename: String[0..1] {
      definition {
        A file name associated with the source code (and which could be used to extract the source code fragment to from the document, or to populate the source code fragment with from the external file, in automated processing of the document).
      }
    }
    +lang: String[0..1] {
      definition {
        The computer language or other notational convention that the source code is expressed in.
      }
    }
    +content: String {
      definition {
        The computer code or other such text presented in the block, as a single unformatted string. (The string should be treated as pre-formatted text, with whitespace treated as significant.)
      }
    }
    +callouts: ReferenceToIdElement[0..*] {
      definition {
        Zero or more cross-references; these are intended to be embedded within the `content` string, and link to annotations.
      }
    }
    +calloutAnnotations: ParagraphBlock[0..*] {
      definition {
        Annotations to the source code; each annotation consists of zero or more paragraphs, and is intended to be referenced by a callout within the source code.
      }
    }
  }

  class FormulaBlock{
    definition {
      Block containing a mathematical expression or other formulas.
    }
    +stem: StemElement {
      definition {
        The content of the formula, as a mathematical expression.
      }
    }
    +unnumbered: Boolean[0..1] {
      definition {
        The block should be excluded from any automatic numbering of blocks of this class in the document.
      }
    }
    +subsequence: String[0..1] {
      definition {
      Define a subsequence for numbering of this block; e.g. if this block would be numbered
      as 7, but it has a subsequence value of XYZ, this block, and all consecutive blocks
      of the same class and with the same subsequence value, will be numbered consecutively
      with the same number and in a subsequence: 7a, 7b, 7c etc.
      }
    }
    +inequality: Boolean[0..1] {
      definition {
        Indication that the formula is to be labelled as an Inequality, if inequalities are differentiated from equations.
      }
    }
    +definitions: DefinitionList[0..1] {
      definition {
        A definitions list defining any symbols used in the formula.
      }
    }
  }

  class ExampleBlock{
    definition {
      Block containing an example illustrating a claim made in the main flow of text.
    }
    +name: TextElement[0..*] {
      definition {
        The caption of the block.
      }
    }
    +unnumbered: Boolean[0..1] {
      definition {
        The block should be excluded from any automatic numbering of blocks of this class in the document.
      }
    }
    +subsequence: String[0..1] {
      definition {
      Define a subsequence for numbering of this block; e.g. if this block would be numbered
      as 7, but it has a subsequence value of XYZ, this block, and all consecutive blocks
      of the same class and with the same subsequence value, will be numbered consecutively
      with the same number and in a subsequence: 7a, 7b, 7c etc.
      }
    }
    +formula: StemElement[0..*] {
      definition {
        Formula blocks contributing to example content.
      }
    }
    +list: UnorderedList[0..*] {
      definition {
        Unordered list blocks contributing to example content.
      }
    }
    +quote: QuoteBlock[0..*] {
      definition {
        Quotation blocks contributing to example content.
      }
    }
    +sourcecode: SourcecodeBlock[0..*] {
      definition {
        Sourcecode blocks contributing to example content.
      }
    }
    +paragraphs: ParagraphWithFootnote[0..*] {
      definition {
        Paragraph blocks contributing to example content.
      }
    }
  }

  class LiteralBlock{
    definition {
      Pre-formatted blocks are wrappers for text to be rendered with fixed-width typeface, and preserving spaces including line breaks. They are intended for a restricted number of functions, most typically ASCII Art (which is still in prominent use in some standards documents), and computer output. In most cases, Sourcecode blocks are more appropriate in markup, as it is more clearly motivated semantically.
    }
    +alt: String[0..1] {
      definition {
        Accessible description of the preformatted text.
      }
    }
    +name: TextElement[0..*] {
      definition {
        The caption of the block.
      }
    }
    +content: String {
      definition {
        The pre-formatted text presented in the block, as a single unformatted string. (Whitespace is treated as significant.)
      }
    }
  }

  ** note left of Subfigure : Subfigures and images\nonly occur\nwithin figures

  association {
    owner FigureBlock
    member BasicBlock
    member_type inheritance
  }
  association {
    owner LiteralBlock
    member BasicBlock
    member_type inheritance
  }
  association {
    owner SourcecodeBlock
    member BasicBlock
    member_type inheritance
  }
  association {
    owner FormulaBlock
    member BasicBlock
    member_type inheritance
  }
  association {
    owner ExampleBlock
    member BasicBlock
    member_type inheritance
  }

  association {
    owner Subfigure
    member FigureBlock
    member_type inheritance
  }
}
