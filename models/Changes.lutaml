diagram Change {
  *|
  Diagram:        Change
  DateCreate:     28/07/2018
  Description:    BasicDocument / SecureDoc is a family of document models that forms the basis of Metanorma IsoDoc (via Metanorma StandardDocument), which is used to represent ISO Standards and similarly structured standards.
                  It is also the document model that Selagraph operates on.
                  The Relaton Bibliography UML models used in these models are located here: Relaton BibModels.
                  BasicDocument itself is a document model that can serve as a transit data structure for document conversion, such as taking input from AsciiDoc or Markdown and converting them into an output format, such as Metanorma IsoDoc

  Hystory of changes:
  > 22/08/2018
      - diagram configuration updated
  |*

  class Change {
    definition {
      Specification of an update action to be performed incrementally on an element within a BasicDocument.
    }
    +target: ReferenceToIdElement {
      definition {
        The element that this action should be applied to.
      }
    }
    +identifier: UniqueIdentifier {
      definition {
        A unique identifier of this change.
      }
    }
    +parentIdentifier: UniqueIdentifier[0..1] {
      definition { 
        One or more unique identifiers of _Change_ objects, that this change is supposed to follow after.
      }
    }
    +contribMetadata: ContributionElementMetadata[0..*] {
      definition {
        Metadata of the contributor responsible for the action.
      }
    }
  }

  class ChangeSet {
    definition {
      A collection of _Change_ data, specifying the document they should be applied to.
    }
    +changes: Change[0..*] {
      definition {
        The set of _Change_ data.
      }
    }
    +documentIdentifier: UniqueIdentifier {
      definition {
        The unique identifier that identifies the BasicDocument.
      }
    }
  }

  class UniqueIdentifier {
    definition {
      Identifier used to uniquely identify a BasicDocument.
    }
    +value: String {
      definition {
         A string that uniquely identifies a BasicDocument.
      }
    }
  }

  class NodeChange {
    definition {
Possible actions that involve
modification of data elements at the node level within a
BasicDocument.
    }
  }

  class ContentChange {
    definition {
      Possible actions
that involve modification of content within a BasicDocument
data element.
    }
  }

  class ContentModify {
    definition {
Container for a multiple _ContentChangeAction_ data
    }
    +actions: ContentChangeAction[1..*] {
      definition {
One or more `ContentChangeAction` data.
      }
    }
  }

  class NodeInsert {
    definition {
      Specification of the insertion
of a data node in a BasicDocument.
    }
    +content: BasicElement {
      definition {
A data element conforming to _BasicElement_ to be inserted into the specified BasicDocument.
      }
    }
  }

  class NodeDelete {
    definition {
      Specification of the deletion of a data node in a BasicDocument.
    }
    +hashValue: String {
      definition {
A string that contains the hash value of the node to be deleted for verification purposes.
      }
    }
  }

  class NodeMove {
    definition {
      Specification of moving a particular node in a BasicDocument
to another location within the same BasicDocument.
    }
    +positionOld: ReferenceToIdElement {
      definition {
Indicates the position of the node's parent.
  While this seems redundant to the `target` attribute inherited from the _Change_ model,
  it is useful for verifying that the location has not changed.
      }
    }
    +positionNew: ReferenceToIdElement {
      definition {
Indicates the new parent or sibling of the node.
      }
    }
  }

  class AttributeModify {
    definition {
A container for a multiple _AttributeChangeAction_ data.
    }
    +actions: AttributeChangeAction[1..*] {
      definition {
One or more `AttributeChangeAction` data.
      }
    }
  }

  class ContentChangeAction {
    definition {
The actual content
changes that applies to the specified portion of textual content.
This is used both by the _ContentModify_ and _AttributeModify_ models
as their content are treated as pure text.
    }
    +action: ContentAction {
      definition {
Indication that text is to be inserted or deleted from the content.
      }
    }
    +from: Integer {
      definition {
An `Integer` that specifies the beginning cursor position of a textual change.
      }
    }
    +to: Integer {
      definition {
An `Integer` that specifies the ending cursor position of a textual change.
      }
    }
    +text: String[0..1] {
      definition {
In the case of an `insert`, a `String` to be inserted or replace the substring referred to by `from` to `to`.
      }
    }
    +length: Integer[0..1] {
      definition {
In the case of a `delete`, an `Integer` to indicate how many characters to be removed from the `from` position.
  In the case of an `insert`, an `Integer` to indicate the length of the `text` attribute.
      }
    }
  }

  class AttributeChangeAction {
    definition {
Possible actions
that involve modification of an attribute within a BasicDocument
data element.
    }
    +attributeId: String {
      definition {
A `String` that identifies the attribute where the attribute change
should apply to.
      }
    }
  }

  enum ContentAction {
    unstructured {
      definition {
        Specifies the kind of textual change to be undertaken.
      }
    }
    insert {
      definition {
        Text is to be added.
      }
    }
    delete {
      definition {
        Text is to be removed.
      }
    }
  }

  ** note right of NodeChange: Add/remove node\nMove node
  ** note top of AttributeModify: Add attribute\nRemove attribute\nModify attribute
  ** note left of ContentChange: Add text\nDelete text\nModify text

  association {
    owner Change
    member ChangeSet
    member_type direct
  }
  association {
    owner UniqueIdentifier
    member Change
    member_type direct
  }
  association {
    owner Change
    member NodeChange
    owner_type inheritance
  }
  association {
    owner Change
    member ContentChange
    owner_type inheritance
  }

  association {
    owner ContentChange
    member ContentModify
    owner_type inheritance
  }

  association {
    owner ContentChangeAction
    member ContentModify
    member_type direct
  }

  association {
    owner ContentAction
    member ContentChangeAction
    member_type direct
  }
  association {
    owner ContentChangeAction
    member AttributeChangeAction
    owner_type inheritance
  }

  association {
    owner ContentModify
    member AttributeModify
    owner_type inheritance
  }

  association {
    owner AttributeChangeAction
    member AttributeModify
    member_type direct
  }

  association {
    owner NodeChange
    member NodeInsert
    owner_type inheritance
  }
  association {
    owner NodeChange
    member NodeDelete
    owner_type inheritance
  }
  association {
    owner NodeChange
    member NodeMove
    owner_type inheritance
  }
}
