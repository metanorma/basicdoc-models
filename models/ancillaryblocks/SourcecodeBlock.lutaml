class SourcecodeBlock{
  definition {
    Block containing computer code or comparable text.
  }
  +name: TextElement[0..*] {
    definition {
      The caption of the block.
    }
  }
  +unnumbered: Boolean[0..1] {
    definition {
      The block should be excluded from any automatic numbering of blocks of this class in the document.
    }
  }
  +subsequence: String[0..1] {
    definition {
    Define a subsequence for numbering of this block; e.g. if this block would be numbered
    as 7, but it has a subsequence value of XYZ, this block, and all consecutive blocks
    of the same class and with the same subsequence value, will be numbered consecutively
    with the same number and in a subsequence: 7a, 7b, 7c etc.
    }
  }
  +filename: String[0..1] {
    definition {
      A file name associated with the source code (and which could be used to extract the source code fragment to from the document, or to populate the source code fragment with from the external file, in automated processing of the document).
    }
  }
  +lang: String[0..1] {
    definition {
      The computer language or other notational convention that the source code is expressed in.
    }
  }
  +content: String {
    definition {
      The computer code or other such text presented in the block, as a single unformatted string. (The string should be treated as pre-formatted text, with whitespace treated as significant.)
    }
  }
  +callouts: ReferenceToIdElement[0..*] {
    definition {
      Zero or more cross-references; these are intended to be embedded within the `content` string, and link to annotations.
    }
  }
  +calloutAnnotations: ParagraphBlock[0..*] {
    definition {
      Annotations to the source code; each annotation consists of zero or more paragraphs, and is intended to be referenced by a callout within the source code.
    }
  }
}


