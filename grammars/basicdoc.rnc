grammar {

document = 
element document {
  attribute identifier { text }?,
  bibdata, sections, references*
}

bibdata =
  element bibdata { BibData }

sections = 
  element sections {
    section+
}

section =
  element section { 
    Basic-Section,
    section*
  }

Basic-Section =
    attribute id { xsd:ID }?,
    attribute language { text }?,
    attribute script { text }?,
    section-title?,
    BasicBlock*

references =
  element references {
    attribute id { xsd:ID }?,
    section-title?,
    BasicBlock*,
    bibitem*
  }

section-title =
  element title { TextElement* }

BasicBlock =  paragraph-with-footnote | table | formula | admonition | ol | ul | dl | figure |
  quote | sourcecode | example | review | pre | note | pagebreak | hr | bookmark | amend

BasicBlockNoId =  paragraph-with-footnote-no-id | table-no-id | formula-no-id | admonition-no-id | ol-no-id | ul-no-id | dl-no-id | figure-no-id |
  quote-no-id | sourcecode-no-id | example-no-id | review | pre-no-id | note-no-id | pagebreak | hr | bookmark | amend

amend = 
  element amend { AmendType }

AmendType =
    attribute id { xsd:ID }?,
    attribute change { "add" | "modify" | "delete" | "replace" },
    attribute path { text }?,
    attribute path_end { text }?,
    attribute title { text }?,
    element location { (locality | localityStack)* }?,
    element description { BasicBlock* }?,
    element newcontent {
        attribute id { xsd:ID }?,
        BasicBlock* }?,
    classification*,
    contributor*

classification = element classification {
  classification_tag, classification_value
}

classification_tag = element tag { text }
classification_value = element value { text }

paragraph =
  element p { ParagraphType }

Alignments = ( "left" | "right" | "center" | "justified" )

RequiredId = 
    attribute id { xsd:ID }

OptionalId = 
    attribute id { xsd:ID }?

ParagraphAttrs =
    attribute align { Alignments }?

ParagraphType =
    RequiredId,
    ParagraphAttrs,
    ParagraphBody

ParagraphBody =
   ( TextElement )*, note*

ParagraphFnBody =
   ( TextElement | fn )*, note*

paragraph-no-id =
  element p {
    OptionalId,
    ParagraphAttrs,
    ParagraphBody
  }

paragraph-with-footnote =
  element p {
    RequiredId,
    ParagraphAttrs,
    ParagraphFnBody
}

paragraph-with-footnote-no-id =
  element p {
    OptionalId,
    ParagraphAttrs,
    ParagraphFnBody
}

note =
  element note {
    RequiredId,
    NoteAttr,
    NoteBody
  }

note-no-id =
  element note {
    OptionalId,
    NoteAttr,
    NoteNoIdBody
  }

NoteAttr = empty

NoteBody =
    paragraph+

NoteNoIdBody =
    paragraph-no-id+

review =
  element review {
  RequiredId,
  attribute reviewer { text },
  attribute type { text }?,
  attribute date { xsd:dateTime }?,
  attribute from { xsd:IDREF }?,
  attribute to { xsd:IDREF }?,
  paragraph+
}

formula =
  element formula {
    RequiredId,
    FormulaAttr,
    FormulaBody
}

formula-no-id =
  element formula {
    OptionalId,
    FormulaAttr,
    FormulaNoIdBody
}

FormulaAttr =
    attribute unnumbered { xsd:boolean }?,
    attribute subsequence { text }?,
    attribute inequality { xsd:boolean }?

FormulaBody =
    stem, dl?, note*

FormulaNoIdBody =
    stem, dl-no-id?, note-no-id*

quote =
  element quote {
    RequiredId,
    QuoteAttr,
    QuoteBody
}

quote-no-id =
  element quote {
    OptionalId,
    QuoteAttr,
    QuoteNoIdBody
}

QuoteAttr =
    attribute alignment { Alignments }?

QuoteBody =
    quote-source?,
    quote-author?,
    paragraph-with-footnote+,
    note*

QuoteNoIdBody =
    quote-source?,
    quote-author?,
    paragraph-with-footnote-no-id+,
    note-no-id*

quote-source =
  element source { erefType }

quote-author =
  element author { text }

sourcecode =
  element sourcecode {
    RequiredId,
    SourceAttr,
    SourceBody
  }

sourcecode-no-id =
  element sourcecode {
    OptionalId,
    SourceAttr,
    SourceNoIdBody
  }

SourceAttr =
    attribute unnumbered { xsd:boolean }?,
    attribute subsequence { text }?,
    attribute lang { text }?

SourceBody =
    tname?, ( text | callout )+, annotation*, note*

SourceNoIdBody =
    tname?, ( text | callout )+, annotation*, note-no-id*

pre =
  element pre {
    RequiredId,
    PreAttr,
    PreBody
  }

pre-no-id =
  element pre {
    OptionalId,
    PreAttr,
    PreNoIdBody
  }

PreAttr =
    attribute alt { text }?

PreBody =
    tname?, text, note*

PreNoIdBody =
    tname?, text, note-no-id*

table =
  element table {
    RequiredId,
    TableAttr,
    TableBody
  }

table-no-id =
  element table {
    OptionalId,
    TableAttr,
    TableNoIdBody
  }

TableAttr =
    attribute unnumbered { xsd:boolean }?,
    attribute subsequence { text }?,
    attribute alt { text }?,
    attribute summary { text }?,
    attribute uri { xsd:anyURI }?

TableBody =
    tname?, thead?, tbody, tfoot?, dl?, table-note*

TableNoIdBody =
    tname?, thead-no-id?, tbody-no-id, tfoot-no-id?, dl-no-id?, table-note-no-id*

tname = element name { (PureTextElement | eref | stem | keyword | xref | hyperlink | index | index-xref)+ }
thead = element thead { tr }
thead-no-id = element thead { tr-no-id }
tfoot = element tfoot { tr }
tfoot-no-id = element tfoot { tr-no-id }
tbody = element tbody { tr+ }
tbody-no-id = element tbody { tr-no-id+ }

table-note = element note { paragraph }
table-note-no-id = element note { paragraph-no-id }

tr =
  element tr { ( td | th )+ }

tr-no-id =
  element tr { ( td-no-id | th-no-id )+ }

td =
  element td {
    TdAttr,
    TdBody
}

td-no-id =
  element td {
    TdAttr,
    TdNoIdBody
}

TdAttr =
    attribute colspan { text }?,
    attribute rowspan { text }?,
    attribute align { "left" | "right" | "center" }?,
    attribute valign { "top" | "middle" | "bottom" | "baseline" }?

TdBody =
    (
      (TextElement )* |
      paragraph-with-footnote+
    )

TdNoIdBody =
    (
      (TextElement )* |
      paragraph-with-footnote-no-id+
    )

th =
  element th {
    ThAttr,
    ThBody
}

th-no-id =
  element th {
    ThAttr,
    ThNoIdBody
}

ThAttr = TdAttr

ThBody = TdBody

ThNoIdBody = TdNoIdBody

example =
  element example {
    RequiredId,
    ExampleAttr,
    ExampleBody
}

example-no-id =
  element example {
    OptionalId,
    ExampleAttr,
    ExampleNoIdBody
}

ExampleAttr =
    attribute unnumbered { xsd:boolean }?,
    attribute subsequence { text }?

ExampleBody =
    tname?,
    ( formula | ul | ol | dl | quote | sourcecode | paragraph-with-footnote )+,
    note*

ExampleNoIdBody =
    tname?,
    ( formula-no-id | ul-no-id | ol-no-id | dl-no-id | quote-no-id | sourcecode-no-id | paragraph-with-footnote-no-id )+,
    note-no-id*

admonition =
  element admonition {
    RequiredId,
    AdmonitionAttr,
    AdmonitionBody
}

admonition-no-id =
  element admonition {
    OptionalId,
    AdmonitionAttr,
    AdmonitionNoIdBody
}

AdmonitionAttr =
    attribute type { AdmonitionType },
    attribute class { text }?,
    attribute uri { xsd:anyURI }?

AdmonitionBody =
    tname?,
    paragraph-with-footnote*,
    note*

AdmonitionNoIdBody =
    tname?,
    paragraph-with-footnote-no-id*,
    note-no-id*

AdmonitionType =
  "warning" | "note" | "tip" | "important" | "caution" 

figure =
  element figure {
    RequiredId,
    FigureAttr,
    FigureBody
  }

figure-no-id =
  element figure {
    OptionalId,
    FigureAttr,
    FigureNoIdBody
  }

FigureAttr =
    attribute unnumbered { xsd:boolean }?,
    attribute subsequence { text }?,
    attribute class { text }?

FigureBody =
     source?, tname?, 
     (image | video | audio | pre | paragraph-with-footnote+ | figure*), 
     fn*, dl?, note*

FigureNoIdBody =
     source?, tname?, 
     (image-no-id | video-no-id | audio-no-id | pre-no-id | paragraph-with-footnote-no-id+ | figure-no-id*), 
     fn*, dl-no-id?, note-no-id*


TextElement =
  text | em | eref | strong | stem | sub | sup | tt | underline | keyword | ruby |
  strike | smallcap | xref | br | hyperlink | hr | pagebreak | bookmark | image | index | index-xref

PureTextElement =
  text | em | strong | sub | sup | tt | underline | strike | smallcap | br

source = element source { TypedUri }

em = element em { (PureTextElement|stem|eref|xref|hyperlink|index|index-xref)* }
strong = element strong { (PureTextElement|stem|eref|xref|hyperlink|index|index-xref)* }
tt = element tt { (PureTextElement|eref|xref|hyperlink|index|index-xref)* }
keyword = element keyword { (PureTextElement|index|index-xref)* }
sub = element sub { PureTextElement* }
sup = element sup { PureTextElement* }
strike = element strike { (PureTextElement|index|index-xref)* }
underline = element underline { 
  attribute style { text }?,
  PureTextElement*
}
smallcap = element smallcap { PureTextElement* }

ruby = element ruby { (ruby_pronunciation | ruby_annotation), ( text | ruby ) }

ruby_pronunciation = element pronunciation {
  attribute value { text },
  attribute script { text }?,
  attribute lang { text }? 
}

ruby_annotation = element annotation {
  attribute value { text },
  attribute script { text }?,
  attribute lang { text }?
}

br = element br { empty }
hr = element hr { empty }
pagebreak = element pagebreak { empty }

index = element index {
  attribute to { xsd:IDREF }?,
  element primary { PureTextElement+ },
  element secondary { PureTextElement+ }?,
  element tertiary { PureTextElement+ }?
}

index-xref = element index-xref {
  attribute also { xsd:boolean },
  element primary { PureTextElement+ },
  element secondary { PureTextElement+ }?,
  element tertiary { PureTextElement+ }?,
  element target { PureTextElement+ }
}


# bare ID element, used for referencing arbitrary spans of text
bookmark =
  element bookmark {
  attribute id { xsd:ID },
  empty
}

ReferenceFormat = ( "external" | "inline" | "footnote" | "callout" )

eref =
  element eref { erefType }

erefType =
    attribute normative { xsd:boolean }?,
    attribute citeas { text },
    attribute type { ReferenceFormat },
    attribute alt { text }?,
    CitationType,
    PureTextElement+

hyperlink =
  element link {
    attribute target { xsd:anyURI },
    attribute type { ReferenceFormat },
    attribute alt { text }?,
    PureTextElement+
}
xref =
  element xref {
     attribute target { xsd:IDREF },
     attribute type { ReferenceFormat },
     attribute alt { text }?,
     PureTextElement+
}

fn =
  element fn {
    attribute reference { text },
    paragraph+
}
# This is xref with fixed @type="footnote", and @target built in as paragraph+
# @reference replaces ReferenceElement/text
# so <fn reference="2"><p>This is a footnote</p></fn>
# corresponds to 
# <eref type="footnote" target="fn2">2</xref> <p id="fn2">This is a footnote</p>

callout =
  element callout {
    attribute target { xsd:IDREF },
    text
  }

# This is xref with fixed @type="callout"; the target by convention is in an annotation in the same source code snippet
# so <callout target="xyz">1</callout>
# corresponds to <xref type="callout" target="xyz">1</xref>
image = element image { 
    RequiredId,
    ImageAttr
}

image-no-id = element image { 
    OptionalId,
    ImageAttr
}

ImageAttr =
    attribute src { xsd:anyURI },
    attribute mimetype { text },
    attribute filename { text }?,
    attribute width { ImageSize }?,
    attribute height { ImageSize }?,
    attribute alt { text }?,
    attribute title { text }?,
    attribute longdesc { xsd:anyURI }?

ImageSize = xsd:string { pattern = "\d+([.]\d+)?(%?)" } | "auto"

video =
  element video {
    RequiredId,
    VideoAttr,
    VideoBody
}

video-no-id = 
  element video {
    OptionalId,
    VideoAttr,
    VideoBody
}

VideoAttr =
    attribute src { xsd:anyURI },
    attribute mimetype { text },
    attribute filename { text }?,
    attribute width { xsd:int | "auto" }?,
    attribute height { xsd:int | "auto" }?,
    attribute alt { text }?,
    attribute title { text }?,
    attribute longdesc { xsd:anyURI }?

VideoBody =
    altsource*

audio =
  element audio {
    RequiredId,
    AudioAttr,
    AudioBody
}

audio-no-id =
  element audio {
    OptionalId,
    AudioAttr,
    AudioBody
}

AudioAttr =
    attribute src { xsd:anyURI },
    attribute mimetype { text },
    attribute filename { text }?,
    attribute alt { text }?,
    attribute title { text }?,
    attribute longdesc { xsd:anyURI }?

AudioBody =
    altsource*

altsource =
  element altsource {
    attribute src { xsd:anyURI },
    attribute mimetype { text },
    attribute filename { text }?
}


stem =
  element stem {
    attribute type { "MathML" | "AsciiMath" },
     ( text | AnyElement )+
}

annotation =
  element annotation {
    RequiredId,
    paragraph
}

ul =
  element ul {
    RequiredId,
    UlAttr,
    UlBody
}

ul-no-id =
  element ul {
    OptionalId,
    UlAttr,
    UlNoIdBody
}

UlAttr = empty

UlBody =
    li+, note*

UlNoIdBody =
    li-no-id+, note-no-id*

li =
  element li {
    OptionalId,
    LiAttr,
    LiBody
}

li-no-id =
  element li {
    OptionalId,
    LiAttr,
    LiNoIdBody
}

LiAttr = empty

LiBody =
    paragraph-with-footnote+

LiNoIdBody =
    paragraph-with-footnote-no-id+

ol =
  element ol {
    RequiredId,
    OlAttr,
    OlBody
}

ol-no-id =
  element ol {
    OptionalId,
    OlAttr,
    OlNoIdBody
}

OlAttr =
    attribute type { ( "roman" | "alphabet" | "arabic" |
                       "roman_upper" | "alphabet_upper" ) },
    attribute start { text }?

OlBody =
    li+, note*

OlNoIdBody =
    li-no-id+, note-no-id*

dl =
  element dl {
    RequiredId,
    DlAttr,
    DlBody
}

dl-no-id =
  element dl {
    OptionalId,
    DlNoIdBody
}

DlAttr = empty

DlBody =
    (dt, dd)+, note*

DlNoIdBody =
    (dt, dd-no-id)+, note-no-id*

dt =
  element dt { TextElement* }

dd =
  element dd { paragraph-with-footnote* }

dd-no-id =
  element dd { paragraph-with-footnote-no-id* }

}
